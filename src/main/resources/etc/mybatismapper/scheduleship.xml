<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="scheduleship">

	<cache-ref namespace="schedule" />



	<!-- BEGIN MEN WORK MAP -->

	<resultMap id="menWork"
		type="org.uario.seaworkengine.statistics.MenNeedToShift">
		<id property="shift" column="shift" />
		<result property="menwork" column="menwork" />
	</resultMap>

	<!-- END MEN WORK MAP -->

	<insert id="createScheduleShip" parameterType="org.uario.seaworkengine.model.ScheduleShip">
		INSERT INTO
		scheduleship (idship, volume, note, arrivaldate, departuredate)
		VALUES
		(#{idship}, #{volume}, #{note}, #{arrivaldate}, #{departuredate});
	</insert>

	<delete id="deleteScheduleShip" parameterType="Integer">
		delete from
		scheduleship
		where
		id = #{id_scheduleShip}
	</delete>

	<select id="loadScheduleShip" parameterType="Integer"
		resultType="org.uario.seaworkengine.model.ScheduleShip">
		SELECT s.id, s.idship, s.volume, s.note, s.arrivaldate,
		s.departuredate,
		sh.name
		FROM
		scheduleship s, ship sh
		where s.idship =
		sh.id and
		s.id =
		#{id_scheduleShip};
	</select>

	<select id="loadAllScheduleShip" resultType="org.uario.seaworkengine.model.ScheduleShip">
		SELECT s.id,
		s.idship, s.volume, s.note, s.arrivaldate, s.departuredate,
		sh.name
		FROM
		scheduleship s,
		ship sh
		where s.idship = sh.id
		order by s.arrivaldate
		DESC;
	</select>

	<select id="selectAllScheduleShipFulltextSearchLike"
		parameterType="String" resultType="org.uario.seaworkengine.model.ScheduleShip">
		SELECT s.id, s.idship, s.volume, s.note, s.arrivaldate,
		s.departuredate,
		sh.name
		FROM
		scheduleship s, ship sh

		<if test="my_full_text_search != null">
			WHERE (sh.name like CONCAT('%',#{my_full_text_search},
			'%') and s.idship =
			sh.id)
		</if>

		order by s.arrivaldate DESC;
	</select>


	<update id="updateScheduleShip" parameterType="org.uario.seaworkengine.model.ScheduleShip">
		UPDATE
		scheduleship
		SET
		idship = #{idship},
		volume = #{volume},
		note = #{note},
		arrivaldate =
		#{arrivaldate},
		departuredate =
		#{departuredate}
		WHERE id =
		#{id};
	</update>

	<insert id="createDetailScheduleShip" parameterType="org.uario.seaworkengine.model.DetailScheduleShip">
		INSERT INTO
		detailscheduleship
		(idscheduleship, shift, operation, iduser,
		idseconduser, handswork, menwork, shiftdate, notedetail)
		VALUES
		(#{idscheduleship},
		#{shift},#{operation},#{iduser},#{idseconduser},#{handswork},#{menwork},#{shiftdate},
		#{notedetail});
	</insert>

	<delete id="deleteDetailScheduleShip" parameterType="Integer">
		delete from
		detailscheduleship
		where
		id = #{id_detailScheduleShip}
	</delete>

	<delete id="deteleDetailSchedueleShipByIdSchedule"
		parameterType="Integer">
		delete from
		detailscheduleship
		where
		idscheduleship =
		#{id_scheduleShip};
	</delete>


	<select id="loadDetailScheduleShip" parameterType="Integer"
		resultType="org.uario.seaworkengine.model.DetailScheduleShip">
		SELECT d.id,
		d.idscheduleship,
		d.shift,
		d.operation,
		d.iduser,
		d.notedetail,
		d.idseconduser, d.handswork, d.menwork, d.shiftdate,
		concat(u.lastname, ' ', u.firstname) AS firstOperativeName,
		concat(us.lastname, ' ', us.firstname) AS secondOperativeName
		FROM
		detailscheduleship d
		left join
		user us ON
		(d.idseconduser = us.id),
		user u where
		d.id =
		#{id_detailScheduleShip}
		and d.iduser = u.id
		order by d.shift asc;
	</select>

	<select id="calculateHandsWorkInDateAndShipName" parameterType="map"
		resultType="org.uario.seaworkengine.statistics.ShipTotal">
		SELECT SUM(handswork) as totalhands, SUM(menwork) as totalmen FROM
		(
		SELECT d.handswork, d.menwork
		FROM
		detailscheduleship d
		left join
		user us
		ON (d.idseconduser = us.id),
		user u, ship
		s, scheduleship ss
		where
		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},
			'%') ) and
		</if>
		<if test="shift != null">
			d.shift = #{shift} and
		</if>
		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		date(ss.arrivaldate) >= date(#{dateFrom}) and date(#{dateTo}) >=
		date(ss.arrivaldate)
		) as detail;
	</select>

	<select id="calculateHandsWorkAndMensByArrivalDateAndShipName"
		parameterType="map" resultType="org.uario.seaworkengine.statistics.ShipTotal">
		SELECT SUM(handswork) as totalhands, SUM(menwork) as totalmen FROM
		(
		SELECT d.handswork, d.menwork
		FROM
		detailscheduleship d
		left join
		user us
		ON (d.idseconduser = us.id),
		user u, ship
		s, scheduleship ss
		where
		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},
			'%') ) and
		</if>
		<if test="shift != null">
			d.shift = #{shift} and
		</if>
		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		date(ss.arrivaldate) = date(#{arrivaldate})
		) as detail;
	</select>


	<select id="calculateNumberOfShipInDateAndShipName"
		parameterType="map" resultType="Integer">
		SELECT COUNT(idship) FROM
		(
		SELECT distinct ss.idship
		FROM
		detailscheduleship d
		left join
		user us ON (d.idseconduser = us.id),
		user
		u, ship
		s, scheduleship ss
		where
		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},
			'%') ) and
		</if>
		<if test="shift != null">
			d.shift = #{shift} and
		</if>
		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		date(ss.arrivaldate) >= date(#{dateFrom}) and date(#{dateTo}) >=
		date(ss.arrivaldate) order by d.shift asc
		) as detail;
	</select>


	<select id="calculateVolumeInDateAndShipName" parameterType="map"
		resultType="Integer">
		SELECT SUM(volume) FROM
		(
		SELECT distinct
		d.idscheduleship, ss.volume
		FROM
		detailscheduleship d
		left join
		user us ON (d.idseconduser = us.id),
		user u, ship
		s, scheduleship ss
		where
		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},'%') ) and
		</if>
		<if test="shift != null">
			d.shift = #{shift} and
		</if>
		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		date(ss.arrivaldate) >= date(#{dateFrom}) and date(#{dateTo}) >=
		date(ss.arrivaldate) order by d.shift asc
		) as detail;
	</select>

	<select id="calculateVolumeByArrivalDateAndShipName"
		parameterType="map" resultType="Integer">
		SELECT SUM(volume) FROM
		(
		SELECT distinct
		d.idscheduleship, ss.volume
		FROM
		detailscheduleship d
		left join
		user us ON (d.idseconduser = us.id),
		user u, ship
		s, scheduleship ss
		where
		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},
			'%') ) and
		</if>
		<if test="shift != null">
			d.shift = #{shift} and
		</if>
		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		ss.arrivaldate=date(#{arrivaldate})
		) as detail;
	</select>

	<select id="calculateNumberOfShipByArrivalDateAndShipName"
		parameterType="map" resultType="Integer">
		SELECT COUNT(idship) FROM
		(
		SELECT distinct ss.idship
		FROM
		detailscheduleship d
		left join
		user us ON (d.idseconduser = us.id),
		user
		u, ship
		s, scheduleship ss
		where

		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},
			'%') ) and
		</if>

		<if test="shift != null">
			d.shift = #{shift} and
		</if>

		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		ss.arrivaldate=date(#{arrivaldate})
		) as detail;
	</select>

	<select id="loadDetailScheduleShipByDateAndShipName"
		parameterType="map" resultType="org.uario.seaworkengine.model.DetailScheduleShip">
		SELECT
		d.shift, d.id, d.notedetail, d.idscheduleship, d.notedetail,
		s.name, d.operation,
		ss.note,ss.arrivaldate,
		ss.departuredate,
		d.iduser,d.idseconduser,
		d.handswork,
		d.menwork, d.shiftdate,
		s.id as
		id_ship,
		concat(u.lastname, ' ', u.firstname) AS
		firstOperativeName,
		concat(us.lastname, ' ', us.firstname) AS secondOperativeName
		FROM
		detailscheduleship d
		left join
		user us ON
		(d.idseconduser = us.id),
		user u, ship
		s, scheduleship ss
		where

		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},
			'%') ) and
		</if>

		<if test="shift != null">
			d.shift = #{shift} and
		</if>

		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		ss.arrivaldate>=#{datefrom} and #{dateto}>=ss.arrivaldate order by
		d.shift asc;

	</select>

	<select id="loadDetailScheduleShipByShiftDateAndShipName"
		parameterType="map" resultType="org.uario.seaworkengine.model.DetailScheduleShip">
		SELECT
		d.shift, d.id, d.notedetail, d.idscheduleship, d.notedetail,
		s.name, d.operation,
		ss.note,ss.arrivaldate,
		ss.departuredate,
		d.iduser,
		d.idseconduser,
		d.handswork,
		d.menwork, d.shiftdate, s.id as
		id_ship,
		concat(u.lastname, ' ', u.firstname) AS firstOperativeName,
		concat(us.lastname, ' ', us.firstname) AS secondOperativeName
		FROM
		detailscheduleship d
		left join
		user us ON
		(d.idseconduser = us.id),
		user u, ship
		s, scheduleship ss
		where

		<if test="full_text_search != null">
			(s.name like CONCAT('%',#{full_text_search},
			'%') ) and
		</if>

		<if test="shift != null">
			d.shift = #{shift} and
		</if>

		d.idscheduleship = ss.id and ss.idship = s.id and d.iduser = u.id and
		d.shiftdate=#{shiftdate} order by d.shift asc;
	</select>

	<select id="loadDetailScheduleWithShiftDateNull" resultType="org.uario.seaworkengine.model.DetailScheduleShip">
		SELECT
		d.shift, d.id, d.idscheduleship, d.notedetail, s.name,
		d.operation,
		ss.note,ss.arrivaldate,
		ss.departuredate, s.id as id_ship,
		d.iduser,
		d.handswork, d.menwork,
		d.shiftdate,
		concat(u.lastname, ' ',
		u.firstname) AS firstOperativeName,
		concat(us.lastname, ' ',
		us.firstname) AS secondOperativeName
		FROM
		detailscheduleship d
		left join
		user us ON (d.idseconduser = us.id),
		user u, ship s,
		scheduleship ss
		where
		d.idscheduleship = ss.id and
		ss.idship = s.id and
		d.iduser = u.id and
		d.shiftdate IS NULL
		order by
		d.shift asc;
	</select>

	<select id="loadDetailScheduleShipByIdSchedule" parameterType="Integer"
		resultType="org.uario.seaworkengine.model.DetailScheduleShip">
		SELECT d.id, d.idscheduleship, d.shift, d.operation,
		d.iduser, d.idseconduser, d.handswork, d.menwork, d.shiftdate,
		d.notedetail,
		concat(u.lastname, ' ', u.firstname) AS
		firstOperativeName,
		concat(us.lastname, ' ', us.firstname) AS
		secondOperativeName
		FROM
		detailscheduleship
		d
		left join
		user us ON (d.idseconduser = us.id),
		user u
		where
		d.idscheduleship =
		#{id_scheduleShip} and d.iduser = u.id
		order by
		d.shiftdate asc, d.shift asc;
	</select>

	<select id="loadScheduleShipByIdShipAndArrivalDate"
		parameterType="map" resultType="org.uario.seaworkengine.model.ScheduleShip">
		SELECT id, idship, volume, note,
		arrivaldate, departuredate
		FROM
		scheduleship where
		idship = #{idship} and
		arrivaldate = #{arrivaldate};
	</select>

	<select id="loadScheduleShipByArrivalDate" parameterType="map"
		resultType="org.uario.seaworkengine.model.ScheduleShip">
		SELECT id,
		idship, volume, note, arrivaldate, departuredate
		FROM
		scheduleship where
		date(arrivaldate) = date(#{arrivaldate});
	</select>

	<select id="loadShipInDate" parameterType="map"
		resultType="org.uario.seaworkengine.model.Ship">
		SELECT sh.id, sh.name, sh.line, sh.shiptype,
		sh.shipcondition, sh.twtype
		FROM scheduleship s, ship sh
		WHERE
		sh.id=s.idship and date(#{shipDate}) >=
		date(s.arrivalDate) and
		date(s.departureDate)>=date(#{shipDate});
	</select>


	<select id="loadScheduleShipInDate" parameterType="map"
		resultType="org.uario.seaworkengine.model.ScheduleShip">
		<![CDATA[
		
		SELECT ss.id, ss.idship, ss.volume, ss.note, ss.arrivaldate, ss.departuredate, s.name
		FROM
		scheduleship ss, ship s 
		where
		date(ss.arrivaldate) >= date(#{dateFrom}) and date(#{dateTo}) >= date(ss.arrivaldate) and s.id = ss.idship;
		
		]]>
	</select>

	<update id="updateDetailScheduleShip" parameterType="org.uario.seaworkengine.model.DetailScheduleShip">
		UPDATE
		detailscheduleship SET
		idscheduleship = #{idscheduleship},
		shift =
		#{shift},
		operation = #{operation},
		iduser = #{iduser},
		idseconduser =
		#{idseconduser},
		handswork = #{handswork},
		menwork = #{menwork},
		shiftdate = #{shiftdate},
		notedetail = #{notedetail}
		WHERE id = #{id};
	</update>

	
	<insert id="createDetailFinalScheduleShip" parameterType="org.uario.seaworkengine.model.DetailFinalScheduleShip">
		INSERT INTO
		detailfinalscheduleship (id, crane, volume, timework, iddetailscheduleship) 
		VALUES
		(#{id}, #{crane}, #{volume}, #{timework}, #{iddetailscheduleship});
	</insert>
	
	<delete id="deleteDetailFinalScheduleShipById" parameterType="Integer">
		delete from
		detailfinalscheduleship
		where
		id = #{id}
	</delete>
	
	<select id="loadDetailFinalScheduleShipById" parameterType="Integer"
		resultType="org.uario.seaworkengine.model.DetailFinalScheduleShip">
		SELECT id, crane, volume, timework, iddetailscheduleship
		FROM
		detailfinalscheduleship where
		id = #{id};
	</select>
	
	<update id="updateDetailFinalScheduleShip" parameterType="org.uario.seaworkengine.model.DetailFinalScheduleShip">
		UPDATE detailfinalscheduleship
		SET
		id = #{id},
		crane = #{crane},
		volume = #{volume},
		timework = #{timework},
		volume = #{volume},
		iddetailscheduleship = #{iddetailscheduleship}
		WHERE id = #{id};
	</update>
	
	<select id="loadDetailFinalScheduleShipByIdDetailScheduleShip" resultType="org.uario.seaworkengine.model.DetailFinalScheduleShip" parameterType="Integer">
		SELECT id, crane, volume, timework, iddetailscheduleship
		FROM
		detailfinalscheduleship where
		iddetailscheduleship = #{idDetailScheduleShip};
	</select>

</mapper>