<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="statistics">

	<cache-ref namespace="schedule" />


	<select id="daysToRemoveFromSaturation" resultType="int">
		select
		count(s.id)
		from
		schedule s,
		usershift us
		where
		s.user = #{user_id}
		and s.shift = us.id
		and (us.break_shift = 1
		or us.waitbreak_shift = 1
		or us.recorded = 1)
		and (s.date_schedule <![CDATA[>=]]>
		date(#{date_from})
		and s.date_schedule <![CDATA[<=]]>
		date(#{date_to}))

	</select>

	<!-- SELECT FOR VERIFY AND REVIEW SHIP (BAP) -->
	<select id="reviewShipWork" parameterType="map"
		resultType="org.uario.seaworkengine.model.ReviewShipWork">

		select ss.id as rif_sws, ss.rif_mct,
		s.name as shipname,
		s.id as
		id_ship,
		dss.shift,
		d.timework as time_work,
		(select c.number from crane
		c where d.id_crane=c.id) as crane, d.crane_gtw,
		dss.shiftdate as
		date_request,
		d.volume,
		d.volumeunderboard,
		d.volumeunderboard_sws,
		d.volume_tw_mct,
		d.notedetail,
		d.invoicing_cycle,
		dss.sky, dss.rain,
		dss.wind, dss.temperature,
		dss.first_down,
		dss.last_down
		from
		ship s,
		scheduleship ss,
		detailscheduleship dss
		left join
		detailfinalscheduleship d ON (dss.id =
		d.iddetailscheduleship)
		where
		dss.idscheduleship = ss.id
		and s.id =
		ss.idship

		<if test="dt_arg_to != null and dt_arg_from != null">

			and dss.shiftdate <![CDATA[>=]]>
			#{dt_arg_from} and
			dss.shiftdate <![CDATA[<=]]>
			#{dt_arg_to}

		</if>

		<if test="dt_arg_to != null and dt_arg_from == null">

			and dss.shiftdate = #{dt_arg_to}

		</if>

		<if test="dt_arg_to == null and dt_arg_from != null">

			and dss.shiftdate = #{dt_arg_from}

		</if>

		<if test="searchText != null">
			and s.name like CONCAT('%', #{searchText},'%')
		</if>

		<if test="shipType!=null">
			and s.shiptype like CONCAT('%',#{shipType},'%')
		</if>

		<if test="shipLine!=null">
			and s.line like CONCAT('%',#{shipLine},'%')
		</if>

		<if test="shipCondition!=null">
			and s.shipcondition like CONCAT('%',#{shipCondition},'%')
		</if>

		<if test="rifSWS != null">
			and ss.id = #{rifSWS}
		</if>

		<if test="rifMCT != null">
			and ss.rif_mct = #{rifMCT}
		</if>

		<if test="shift != null">
			and dss.shift = #{shift}
		</if>

		<if test="invoicing_cycle_search != null">
			and d.invoicing_cycle = #{invoicing_cycle_search}
		</if>

		<if test="idService != null">
			and ss.id_service = #{idService}
		</if>

		order by date_request, s.name , dss.shift
	</select>

	<!-- SELECT FOR VERIFY AND REVIEW SHIP (BAP) -->
	<select id="reviewShipWorkAggregate" parameterType="map"
		resultType="org.uario.seaworkengine.statistics.ReviewShipWorkAggregate">

		select s.name as shipname,
		ss.idship as id_ship,
		ss.id as rif_sws,
		ss.rif_mct as rif_mct,
		sum(d.timework) as
		time_work,
		sum(d.volume) as
		volume,
		sum(d.volumeunderboard) as
		volumeunderboard,
		sum(d.volumeunderboard_sws) as volumeunderboard_sws,
		sum(d.volume_tw_mct) as volume_tw_mct
		from
		ship s,
		scheduleship ss,
		detailscheduleship dss,
		detailfinalscheduleship
		d
		WHERE
		ss.idship is not
		null and ss.idship is not null and
		dss.idscheduleship = ss.id
		and s.id =
		ss.idship and d.iddetailscheduleship = dss.id

		<if test="dt_arg_to != null and dt_arg_from != null">

			and dss.shiftdate <![CDATA[>=]]>
			#{dt_arg_from} and
			dss.shiftdate <![CDATA[<=]]>
			#{dt_arg_to}

		</if>

		<if test="dt_arg_to != null and dt_arg_from == null">

			and dss.shiftdate = #{dt_arg_to}

		</if>

		<if test="dt_arg_to == null and dt_arg_from != null">

			and dss.shiftdate = #{dt_arg_from}

		</if>


		<if test="searchText != null">
			and s.name like CONCAT('%', #{searchText},'%')
		</if>

		<if test="shipType!=null">
			and s.shiptype like CONCAT('%',#{shipType},'%')
		</if>

		<if test="shipLine!=null">
			and s.line like CONCAT('%',#{shipLine},'%')
		</if>

		<if test="shipCondition!=null">
			and s.shipcondition like CONCAT('%',#{shipCondition},'%')
		</if>

		<if test="rifSWS != null">
			and ss.id = #{rifSWS}
		</if>

		<if test="rifMCT != null">
			and ss.rif_mct = #{rifMCT}
		</if>

		<if test="invoicing_cycle != null">
			and d.invoicing_cycle = #{invoicing_cycle}
		</if>

		<if test="serviceId != null">
			and ss.id_service = #{serviceId}
		</if>

		group by rif_sws order by s.name
	</select>



	<select id="monitorWork" resultType="org.uario.seaworkengine.statistics.impl.MonitorData"
		parameterType="map">

		SELECT
		d.id_ship,
		d.shift as shift_no,
		s.name,
		count(d.board) as
		out_board,(SELECT count(d1.board) FROM detailfinalschedule d1 WHERE
		date(d1.time_from) <![CDATA[>=]]>
		#{date_from} and
		date(d1.time_to)  <![CDATA[<=]]>
		#{date_to}
		and d1.board is not null and d1.shift = d.shift and
		d1.id_ship =
		d.id_ship
		and d1.board = 'A BORDO') as on_board
		FROM
		detailfinalschedule
		d,
		ship s
		WHERE
		d.id_ship = s.id and d.board is
		not
		null
		and d.id_ship is
		not null
		and d.board = 'SOTTO BORDO' and
		date(d.time_from) <![CDATA[>=]]>
		#{date_from} and
		date(d.time_to) <![CDATA[<=]]>
		#{date_to}
		group by d.id_ship, d.shift

	</select>




	<select id="getWorkTimeCountByUser" resultType="double"
		parameterType="map">

		SELECT
		sum(time)
		FROM
		detailfinalschedule dfs,
		schedule s,
		usertask ut
		WHERE
		dfs.id_schedule = s.id and ut.isabsence = 0
		and dfs.task = ut.id
		and s.user = #{id_user} and date(s.date_schedule) <![CDATA[>=]]>
		date(#{date_from}) and
		date(s.date_schedule) <![CDATA[<=]]>
		date(#{date_to})

	</select>









	<select id="listSchedule" resultType="org.uario.seaworkengine.model.Schedule"
		parameterType="map">

		select s.id,
		u.id as user,
		u.employee_identification as
		employee_identification,
		s.shift,
		s.date_schedule,
		concat(u.lastname, '
		', u.firstname) AS name_user,
		s.editor,
		s.controller
		from
		user u,
		schedule
		s
		where (u.id =
		s.user)

		<if test="date_from != null and date_to != null">
			and (s.date_schedule <![CDATA[>=]]>
			#{date_from} and s.date_schedule
			<![CDATA[<=]]>
			#{date_to})
		</if>

		<if test="my_full_text_search != null">
			and (u.firstname like CONCAT('%', #{my_full_text_search},
			'%') or
			u.lastname like CONCAT('%', #{my_full_text_search}, '%') or
			u.employee_identification = #{my_full_text_search})
		</if>

		<if test="date_from != null and date_to != null">
			and (s.date_schedule <![CDATA[>=]]>
			#{date_from} and s.date_schedule
			<![CDATA[<=]]>
			#{date_to})
		</if>

		<if test="shift_number != null">
			and (s.shift = #{shift_number})
		</if>

		order by u.lastname asc, s.date_schedule
	</select>


	<select id="overviewFinalScheduleByShip" resultType="org.uario.seaworkengine.statistics.ShipOverview"
		parameterType="map">
		select
		dfs.id_ship, dfs.board,
		s.name,
		sum(dfs.time) as time,
		sum(dfs.time_vacation)
		as time_vacation
		FROM
		ship
		s,
		detailfinalschedule
		dfs,
		schedule sc
		WHERE
		sc.id = dfs.id_schedule and
		dfs.id_ship is not null
		and s.id =
		dfs.id_ship

		<if test="shipname != null">
			and (s.name like CONCAT('%', #{shipname},'%'))
		</if>

		<if test="shipType!=null">
			and s.shiptype like CONCAT('%',#{shipType},'%')
		</if>

		<if test="shipLine!=null">
			and s.line like CONCAT('%',#{shipLine},'%')
		</if>

		<if test="shipCondition!=null">
			and s.shipcondition like CONCAT('%',#{shipCondition},'%')
		</if>

		<if test="date_from != null and date_to != null">
			and (sc.date_schedule <![CDATA[>=]]>
			#{date_from} and sc.date_schedule
			<![CDATA[<=]]>
			#{date_to})
		</if>

		<if test="date_from != null and date_to == null">
			and sc.date_schedule = #{date_from}
		</if>

		<if test="date_from == null and date_to != null">
			and sc.date_schedule = #{date_to}
		</if>

		group by dfs.id_ship order by s.name

	</select>

	<select id="countWorkerInOverviewInitalSchedule" resultType="Integer"
		parameterType="map">
		select count(distinct u.id)
		from
		user u, user u1, user u2, usertask ut,
		schedule s left outer join
		detailinitialschedule dfs on
		(dfs.id_schedule = s.id)
		where ut.id=dfs.task and ut.isabsence=0 and
		s.user = u.id and s.editor=u1.id and s.controller = u2.id

		<if test="my_full_text_search != null">
			and (u.firstname like CONCAT('%', #{my_full_text_search},
			'%') or
			u.lastname like CONCAT('%', #{my_full_text_search}, '%') or
			u.employee_identification = #{my_full_text_search})
		</if>

		<if test="date_from != null and date_to != null">
			and (s.date_schedule <![CDATA[>=]]>
			#{date_from} and s.date_schedule
			<![CDATA[<=]]>
			#{date_to})
		</if>

		<if test="shift_number != null">
			and (dfs.shift = #{shift_number})
		</if>

		<if test="shift_type != null">
			and (s.shift = #{shift_type})
		</if>

		<if test="task_id != null and task_id != -1">
			and (dfs.task = #{task_id})
		</if>

		<if test="task_id != null and task_id == -1">
			and (dfs.task is null)
		</if>

		order by u.lastname, s.date_schedule, dfs.shift asc

	</select>

	<select id="countWorkerInOverviewFinalSchedule" resultType="Integer"
		parameterType="map">
		select count(distinct u.id)
		from
		user u, user u1, user u2, usertask ut,
		schedule s left
		outer join
		detailfinalschedule dfs on
		(dfs.id_schedule =
		s.id)
		where
		ut.id=dfs.task and ut.isabsence=0 and
		s.user = u.id and
		s.editor=u1.id and s.controller = u2.id
		<if test="my_full_text_search != null">
			and (u.firstname like CONCAT('%', #{my_full_text_search},
			'%') or
			u.lastname like CONCAT('%', #{my_full_text_search}, '%') or
			u.employee_identification = #{my_full_text_search})
		</if>

		<if test="shift_number != null">
			and (dfs.shift = #{shift_number})
		</if>

		<if test="date_from != null and date_to != null">
			and (s.date_schedule <![CDATA[>=]]>
			#{date_from} and s.date_schedule
			<![CDATA[<=]]>
			#{date_to})
		</if>

		<if test="shift_type != null">
			and (s.shift = #{shift_type})
		</if>

		<if test="task_id != null and task_id != -1">
			and (dfs.task = #{task_id})
		</if>

		<if test="task_id != null and task_id == -1">
			and (dfs.task is null)
		</if>

		<if test="reviewshift != null">
			and (dfs.reviewshift = #{reviewshift})
		</if>

		<if test="craneId != null">
			and (crane like CONCAT('%', #{craneId}, '%') )
		</if>

		<if test="idShip != null and idShip != -1">
			and (dfs.id_ship = #{idShip})
		</if>

		<if test="idShip != null and idShip == -1">
			and (dfs.id_ship is null)
		</if>

		order by u.lastname, s.date_schedule, dfs.shift asc

	</select>



	<select id="overviewFinalSchedule" resultType="org.uario.seaworkengine.model.DetailFinalSchedule"
		parameterType="map">
		select
		concat(u.lastname, ' ', u.firstname) as user,
		u.employee_identification as employee_identification,
		dfs.id,
		s.id as
		id_schedule,
		dfs.shift,
		dfs.id_ship, dfs.crane as crane,
		s.shift as
		shift_type,
		dfs.task,
		dfs.time,
		dfs.time_vacation,
		dfs.time_from,
		dfs.time_to,
		dfs.board, dfs.reviewshift,
		s.date_schedule, s.note,
		u.id as
		id_user,
		(select
		concat(temp_1.lastname, ' ', temp_1.firstname)
		from
		user
		temp_1
		where
		temp_1.id = s.editor) as editor,
		(select
		concat(temp_1.lastname, ' ', temp_1.firstname)
		from
		user temp_1
		where
		temp_1.id = s.controller) as controller,
		(select t.code
		from
		user_usertask uut, usertask t
		where uut.id_usertask = t.id and
		uut.id_user = u.id and uut.task_default=1
		) as defaultTask
		from
		user u,
		schedule s left
		outer join
		detailfinalschedule dfs on
		(dfs.id_schedule =
		s.id)
		where
		s.user = u.id
		<if test="my_full_text_search != null">
			and (u.firstname like CONCAT('%', #{my_full_text_search},
			'%') or
			u.lastname like CONCAT('%', #{my_full_text_search}, '%') or
			u.employee_identification = #{my_full_text_search})
		</if>

		<if test="shift_number != null">
			and (dfs.shift = #{shift_number})
		</if>

		<if test="date_from != null and date_to != null">
			and (s.date_schedule <![CDATA[>=]]>
			#{date_from} and s.date_schedule
			<![CDATA[<=]]>
			#{date_to})
		</if>

		<if test="shift_type != null">
			and (s.shift = #{shift_type})
		</if>

		<if test="task_id != null and task_id != -1">
			and (dfs.task = #{task_id})
		</if>

		<if test="task_id != null and task_id == -1">
			and (dfs.task is null)
		</if>

		<if test="reviewshift != null">
			and (dfs.reviewshift = #{reviewshift})
		</if>

		<if test="craneId != null">
			and (crane like CONCAT('%', #{craneId}, '%') )
		</if>

		<if test="idShip != null and idShip != -1">
			and (dfs.id_ship = #{idShip})
		</if>

		<if test="idShip != null and idShip == -1">
			and (dfs.id_ship is null)
		</if>

		order by u.lastname, s.date_schedule, dfs.shift, dfs.time_from asc

	</select>

	<select id="overviewInitalSchedule" resultType="org.uario.seaworkengine.model.DetailInitialSchedule"
		parameterType="map">
		select
		concat(u.lastname, ' ', u.firstname) as user,
		u.employee_identification as employee_identification,
		u.id as id_user,
		dfs.id,
		s.id as id_schedule,
		dfs.shift,
		s.shift as shift_type,
		dfs.task,
		dfs.time,
		dfs.time_vacation,
		dfs.time_from,
		dfs.time_to,
		s.date_schedule,
		s.note,
		(select
		concat(temp_1.lastname, ' ', temp_1.firstname)
		from
		user
		temp_1
		where
		temp_1.id = s.editor) as editor,
		(select
		concat(temp_1.lastname, ' ', temp_1.firstname)
		from
		user temp_1
		where
		temp_1.id = s.controller) as controller,
		(select t.code
		from
		user_usertask uut, usertask t
		where uut.id_usertask = t.id and
		uut.id_user = u.id and uut.task_default=1
		) as defaultTask
		from
		user u,
		schedule s left outer join
		detailinitialschedule dfs on
		(dfs.id_schedule = s.id)
		where
		s.user = u.id

		<if test="my_full_text_search != null">
			and (u.firstname like CONCAT('%', #{my_full_text_search},
			'%') or
			u.lastname like CONCAT('%', #{my_full_text_search}, '%') or
			u.employee_identification = #{my_full_text_search})
		</if>

		<if test="date_from != null and date_to != null">
			and (s.date_schedule <![CDATA[>=]]>
			#{date_from} and s.date_schedule
			<![CDATA[<=]]>
			#{date_to})
		</if>

		<if test="shift_number != null">
			and (dfs.shift = #{shift_number})
		</if>

		<if test="shift_type != null">
			and (s.shift = #{shift_type})
		</if>

		<if test="task_id != null and task_id != -1">
			and (dfs.task = #{task_id})
		</if>

		<if test="task_id != null and task_id == -1">
			and (dfs.task is null)
		</if>

		order by u.lastname, s.date_schedule, dfs.shift, dfs.time_from asc

	</select>





	<select id="datesBreak" resultType="java.util.Date"
		parameterType="map">
		select
		max(d.date_schedule) as date_break
		from
		schedule d,
		usershift s
		where
		d.date_schedule <![CDATA[>=]]>
		#{date_schedule_from}
		and d.date_schedule <![CDATA[<=]]>
		#{date_schedule_to}
		and s.break_shift = 1
		and d.shift = s.id and
		d.id_user = #{id_user}
	</select>


	<select id="timeWorkedProgram" resultType="double"
		parameterType="map">
		select
		sum(d_1.time)
		from
		schedule s_1,
		detailinitialschedule d_1
		where
		s_1.user = #{id_user}
		and s_1.id =
		d_1.id_schedule
		and s_1.date_schedule <![CDATA[<=]]>
		#{date_schedule_to}
		and s_1.date_schedule <![CDATA[>=]]>
		#{date_schedule_from}
	</select>

	<select id="timeWorkedReviewd" resultType="double"
		parameterType="map">
		select
		sum(d_1.time)
		from
		schedule s_1,
		detailfinalschedule d_1
		where
		s_1.user = #{id_user}
		and s_1.id =
		d_1.id_schedule
		and s_1.date_schedule <![CDATA[<=]]>
		#{date_schedule_to}
		and s_1.date_schedule <![CDATA[>=]]>
		#{date_schedule_from}
	</select>


	<select id="dateAtWork" resultType="java.util.Date"
		parameterType="map">
		select
		s.date_schedule
		from
		schedule s,
		usershift us
		where
		s.date_schedule <![CDATA[<=]]>
		#{date_schedule_to}
		and s.date_schedule <![CDATA[>=]]>
		#{date_schedule_from}
		and s.user = #{id_user}
		and s.shift = us.id
		and
		us.presence = 1
		order by s.date_schedule asc
	</select>









	<select id="selectRateShiftByUserProgram" resultType="org.uario.seaworkengine.statistics.RateShift"
		parameterType="map">
		select
		d_1.shift,
		sum(d_1.time) / (select
		sum(d_2.time) as global_sum
		from
		schedule s_2,
		detailinitialschedule d_2
		where
		s_2.user = #{id_user}
		and
		s_2.id =
		d_2.id_schedule
		and (s_2.date_schedule <![CDATA[<=]]>
		#{date_schedule} and s_2.date_schedule >= #{date_from})) * 100 as rate
		from
		schedule s_1,
		detailinitialschedule
		d_1
		where
		s_1.user = #{id_user}
		and s_1.id = d_1.id_schedule
		and
		(s_1.date_schedule <![CDATA[<=]]>
		#{date_schedule} and s_1.date_schedule >= #{date_from})
		group by
		d_1.shift
		order by rate asc

	</select>

	<select id="selectRateShiftByUserReviewd" resultType="org.uario.seaworkengine.statistics.RateShift"
		parameterType="map">
		select
		d_1.shift,
		sum(d_1.time) / (select
		sum(d_2.time) as global_sum
		from
		schedule s_2,
		detailfinalschedule d_2
		where
		s_2.user = #{id_user}
		and
		s_2.id =
		d_2.id_schedule
		and (s_2.date_schedule <![CDATA[<=]]>
		#{date_schedule} and s_2.date_schedule >= #{date_from})) * 100 as rate
		from
		schedule s_1,
		detailfinalschedule
		d_1
		where
		s_1.user = #{id_user}
		and
		s_1.id = d_1.id_schedule
		and
		(s_1.date_schedule <![CDATA[<=]]>
		#{date_schedule} and s_1.date_schedule >= #{date_from})
		group by
		d_1.shift
		order by rate asc

	</select>

	<select id="selectSundayWork" resultType="int" parameterType="map">


		select
		count(distinct ds.date_schedule)
		from
		schedule ds,
		usershift us,
		detailfinalschedule dfs
		where
		dfs.id_schedule =
		ds.id
		and ds.shift =
		us.id
		and us.presence = 1 and dfs.time <![CDATA[<>]]>
		0
		and DAYOFWEEK(ds.date_schedule) = 1
		and ds.user
		= #{id_user}
		and
		ds.date_schedule <![CDATA[>=]]>
		#{date_from} and ds.date_schedule <![CDATA[<=]]>
		#{date_to}

	</select>

	<select id="selectShiftSundayWorkCountReview" resultType="org.uario.seaworkengine.statistics.RateShift"
		parameterType="map">
		select
		dfs.shift as shift, count(distinct ds.date_schedule) rate
		from
		schedule ds,
		usershift us,
		detailfinalschedule dfs
		where
		dfs.id_schedule =
		ds.id
		and ds.shift = us.id
		and us.presence = 1
		and dfs.time <![CDATA[<>]]>
		0
		and DAYOFWEEK(ds.date_schedule) = 1
		and ds.user = #{id_user}
		and
		ds.date_schedule <![CDATA[>=]]>
		#{date_from} and ds.date_schedule <![CDATA[<=]]>
		#{date_to}
		group by shift
		order by shift

	</select>


	<select id="selectShiftSundayWorkCountProgram" resultType="org.uario.seaworkengine.statistics.RateShift"
		parameterType="map">
		select
		dfs.shift as shift, count(distinct ds.date_schedule) rate
		from
		schedule ds,
		usershift us,
		detailinitialschedule dfs
		where
		dfs.id_schedule =
		ds.id
		and ds.shift = us.id
		and us.presence = 1
		and
		dfs.time <![CDATA[<>]]>
		0
		and DAYOFWEEK(ds.date_schedule) = 1
		and ds.user = #{id_user}
		and
		ds.date_schedule <![CDATA[>=]]>
		#{date_from} and ds.date_schedule <![CDATA[<=]]>
		#{date_to}
		group by shift
		order by shift

	</select>




	<select id="getSundayAndHolidaysWork" resultType="int"
		parameterType="map">


		select
		count(distinct ss.date_schedule)
		from
		schedule ss,
		usershift uss,
		detailfinalschedule dfss
		where
		dfss.id_schedule = ss.id and dfss.time <![CDATA[<>]]>
		0
		and ss.date_schedule <![CDATA[>=]]>
		#{date_from} and ss.date_schedule <![CDATA[<=]]>
		#{date_to}
		and ss.user = #{id_user}
		and ss.shift = uss.id
		and
		uss.presence = 1
		and (date_format(ss.date_schedule, '%m-%d') in
		(${days_hol}))
	</select>



	<!-- REPORT SHIP WORK -->

	<!-- CONTAINER -->
	<select id="getTotalInvoiceContainerByInvoce" resultType="org.uario.seaworkengine.statistics.ShipTotal"
		parameterType="Integer">
		select sum(dfs.volume) as containerInvoice,
		sum(dfs.volumeunderboard_sws) as containerRZ_TW_SWS,
		sum(dfs.volume_tw_mct) as containerRZ_TW_MCT,dfs.invoicing_cycle as
		monthInvoice
		from detailfinalscheduleship dfs, detailscheduleship dis,
		scheduleship s
		where dfs.invoicing_cycle is not null and
		dfs.iddetailscheduleship = dis.id and s.id=dis.idscheduleship
		and
		year(dis.shiftdate)=#{year} and s.id_service=(select sv.id from
		service sv where sv.isRZ=1)
		group by monthInvoice;
	</select>

	<select id="getTotalInvoiceContainerByShiftDate" resultType="org.uario.seaworkengine.statistics.ShipTotal"
		parameterType="Integer">
		select sum(dfs.volume) as containerInvoice,
		sum(dfs.volumeunderboard_sws) as containerRZ_TW_SWS,
		sum(dfs.volume_tw_mct) as containerRZ_TW_MCT,month(dis.shiftdate) as
		monthInvoice
		from detailfinalscheduleship dfs, detailscheduleship dis,
		scheduleship s
		where dfs.iddetailscheduleship = dis.id and
		year(dis.shiftdate)=#{year} and s.id=dis.idscheduleship and
		s.id_service=(select sv.id from service sv where sv.isRZ=1)
		group by
		monthInvoice;
	</select>

	<select id="getTotalHandsMenByInvoce" resultType="org.uario.seaworkengine.statistics.ShipTotal"
		parameterType="int">

		select sum(handswork)as handswork, sum(menwork)as
		menwork, invoicing_cycle
		as monthInvoice
		from reportmen
		where shiftyear =
		#{year} and invoicing_cycle is not null group by
		invoicing_cycle

	</select>

	<select id="getTotalHandsMenByShiftDate" resultType="org.uario.seaworkengine.statistics.ShipTotal"
		parameterType="int">
		select sum(dis.handswork) as handswork, sum(dis.menwork)
		as menwork, month(dis.shiftdate) as monthInvoice
		from
		detailscheduleship dis
		where year(dis.shiftdate)=#{year}
		group by
		monthInvoice;
	</select>

	<select id="getTotalHoursByTask" resultType="org.uario.seaworkengine.statistics.ShipTotal"
		parameterType="Integer">
		SELECT
		dtf.task as task_id,
		concat(t.code,' -
		',t.description)as task_code,
		month(s.date_schedule) as month_date,
		sum(dtf.time) as task_hour
		FROM
		detailfinalschedule dtf,
		schedule s,
		usertask t
		where
		t.id = dtf.task
		and s.id = dtf.id_schedule
		and
		year(s.date_schedule) = #{year}
		group by
		task_id , month_date
		order by
		task_id , month_date
	</select>



	<!-- TERMINAL PRODUCTIVITY -->

	<insert id="createTerminalProductivity" parameterType="org.uario.seaworkengine.model.TerminalProductivity">
		INSERT
		INTO terminalproductivity (year_tp,month_tp,productivity) VALUES
		(#{year_tp},#{month_tp},#{productivity});
	</insert>

	<delete id="deleteTerminalProductivity" parameterType="Integer">
		DELETE
		FROM terminalproductivity WHERE id=#{id};
	</delete>

	<select id="loadTerminalProductivity" parameterType="Integer"
		resultType="org.uario.seaworkengine.model.TerminalProductivity">
		SELECT id, year_tp, month_tp, productivity
		FROM
		terminalproductivity
		WHERE id=#{id};
	</select>

	<select id="loadTerminalProductivityYear" parameterType="Integer"
		resultType="org.uario.seaworkengine.model.TerminalProductivity">
		SELECT id, year_tp, month_tp, productivity
		FROM
		terminalproductivity
		WHERE year_tp=#{year};
	</select>

	<update id="updateTerminalProductivity" parameterType="org.uario.seaworkengine.model.TerminalProductivity">
		UPDATE
		terminalproductivity
		SET
		year_tp=#{year_tp},month_tp=#{month_tp},productivity=#{productivity}
		WHERE id=#{id};
	</update>



</mapper>